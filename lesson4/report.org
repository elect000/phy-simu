
#+BEGIN_EXPORT latex
\begin{titlepage}
\begin{center}
\vspace*{2cm}
{\Large シミュレーション物理 \par}
 \par
\vspace{2cm}
{\Large 演習課題(5) \par}
\vspace{2cm}
{\large \today}
\end{center}
\vfill
筑波大学 情報学群 情報科学類 二年\\
江畑 拓哉(201611350)
\end{titlepage}

\tableofcontents

#+END_EXPORT
#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline author:t
#+OPTIONS: broken-links:nil c:nil creator:nil d:(not "LOGBOOK") date:t e:t
#+OPTIONS: email:nil f:t inline:t num:t p:nil pri:nil prop:nil stat:t tags:t
#+OPTIONS: tasks:t tex:t timestamp:t title:nil toc:nil todo:t |:t
#+TITLE: report
#+AUTHOR: elect
#+EMAIL: 
#+LANGUAGE: en
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+CREATOR: Emacs 26.0.91 (Org mode 9.1.6)

#+LATEX_CLASS: koma-article
#+LATEX_CLASS_OPTIONS:
#+LATEX_HEADER:
#+LATEX_HEADER_EXTRA:
#+DESCRIPTION:
#+KEYWORDS:
#+SUBTITLE:
#+LATEX_COMPILER: pdflatex
#+DATE: \today

* 実験の目的
  　本実験では過去の演習課題を組み合わせて引力を含んだ銀河の膨張をシュミレーションした。詳細には引力を含まない場合における銀河の膨張をシュミレーションしたものに、重力場を計算しそれぞれの天体が受ける力を加えたシュミレーションを行った。
* 実験方法
  　プログラム extension.c を作成し、実行した出力を Excel を用いて確認した。
  　実行環境についての情報を以下に列挙する。
  - プログラムとコンパイル
    - Manjaro Linux 17.1.4
    - gcc (GCC) 7.2.1 20180116
    - GNU Emacs 26.0.91 (build 1, x86_64-pc-linux-gnu, GTK+ Version 3.22.26) of 2018-01-26
  - Excel
    - Microsoft \textsuperscript{\textregistered} Excel \textsuperscript{\textregistered} 2016 MSO (16.0.8827.2131) 32bit
* 実験結果
  　以下のグラフを得た。
  #+CAPTION: nk = 0 の天体の分布図
  #+ATTR_LATEX: :width 8cm
  [[./res1.PNG]]
  
  #+CAPTION: nk = 20 の天体の分布図
  #+ATTR_LATEX: :width 8cm
  [[./res2.PNG]]

  #+CAPTION: nk = 40 の天体の分布図
  #+ATTR_LATEX: :width 8cm
  [[./res3.PNG]]
#+LATEX: \newpage
* 考察
  　天体のばらつき具合と拡散具合を確認した限り、銀河の膨張に関するシュミレーションを行うことが出来たと考えられる。また この場合の宇宙は 3 つの図を見る限りでは平坦な宇宙に近いと考えられる。この予測は特に nk = 20, nk = 40 の比較で銀河のサイズがほとんど変化していないことから考えられる。更に nk = 40 の図に注目すると大まかな天体の集合体が確認できることから、この後の進行もこの分布の形に沿って進んでいくことが、引力が計算されているという観点から 考えられる。
#+LATEX: \newpage
* プログラムのリスト
  extension.c
  #+BEGIN_SRC C
#include <stdio.h>
#include <stdlib.h>
#include <math.h>

const int nm = 99;
const double M = 1.0;
const double G = 1.0;
const double H = 3.5;
const int ni = 99;
const double delta_t = 0.1;
const int seed = 449;
const double org = 50.0;
const double delta_x = 1.0;
const double delta_y = 1.0;

double X [500];
double Y [500];

double rho [500][500];
double phi [500][500];

double Fx[500][500];
double Fy[500][500];
double Fpx[500];
double Fpy[500];
double vx[500];
double vy[500];

void init_place();
int check(double, double);
void move_a ();
void calc_rho ();
void calc_phi ();
void calc_power_field ();
void calc_move ();
void calc_power ();
int find_point (double);
void calc_velocity ();
void calc_position ();
void move_b ();
void print_move ();

int check (double x, double y) {
  if ((x * x + y * y) > 25.0) {
    return 0;
  } else {
    return 1;
  }
}

void init_place () {
  double x, y;
  srand(seed);
  for (int t = 0; t < 500; ++t) {
    x = -5.0 + (double) (10.0 * rand()/RAND_MAX);
    y = -5.0 + (double) (10.0 * rand()/RAND_MAX);
    while (0 == check (x, y)) {
      x = -5.0 + (double) (10.0 * rand()/RAND_MAX);
      y = -5.0 + (double) (10.0 * rand()/RAND_MAX);
    }
    X [t] = x;
    Y [t] = y;
  }
}

void init_phi () {
  for (int i = 0; i < 500; ++i) {
    for (int j = 0; j < 500; ++j) {
      phi[i][j] = 0;
    }
  }
}

void move_a () {
  for (int ip = 0; ip < 500; ++ip) {
    X [ip] = X [ip] + vx[ip] * delta_t;
    Y [ip] = Y [ip] + vy[ip] * delta_t;
  }
}

void calc_rho () {
  for (int i = 0; i < 500; ++i) {
    for (int j = 0; j < 500; ++j) {
      rho[i][j] = 0.0;
    }
  }
  for (int i = 0; i < 500; ++i) {
    rho[(int)floor(X [i] + 0.5)][(int)floor(Y [i] + 0.5)] += M;
  }
}

void calc_phi () {
  double p1;
  double p2;
  for (int i = 1; i <= ni; ++i) {
    for (int ix = 1; ix <= ni; ++ix) {
      for (int iy = 1; iy <= ni; ++iy) {
        p1 = phi [ix + 1] [iy] + phi [ix - 1] [iy]
          + phi [ix] [iy + 1] + phi [ix] [iy - 1];
        p2 = G * rho [ix] [iy] * delta_x * delta_x;
        phi [ix] [iy] = (p1 - p2) / 4.0;
      }
    }
  }


void calc_power_field () {
  for (int ix = 0; ix < 500; ++ix) {
    for (int iy = 0; iy < 500; ++iy) {
      Fx[ix][iy] = ( - ((phi[ix + 1][iy]) - (phi[ix][iy]))) / delta_x;
      Fy[ix][iy] = ( - ((phi[ix][iy + 1]) - (phi[ix][iy]))) / delta_y;
    }
  }
}

int find_point (double p) {
  return (int) floor(p + 0.5);
}

void calc_power () {
  int x, y;
  for (int i = 0; i < 500; i++) {
    x = find_point (X [i]);
    y = find_point (Y [i]);
    Fpx [i] = M * Fx [x] [y];
    Fpy [i] = M * Fy [x] [y];
  }
}

void calc_velocity () {
  for (int ip = 0; ip < 500; ip++) {
    vx [ip] = vx [ip] + (Fpx [ip] / M) * delta_t;
    vy [ip] = vy [ip] + (Fpy [ip] / M) * delta_t;
  }
}

void calc_position () {
  for (int i = 0; i < 500; ++i) {
    X[i] += vx[i] * delta_t;
    Y[i] += vy[i] * delta_t;
  }
}

void calc_move () {
  calc_power ();
  calc_velocity ();
  calc_position ();
}

void move_b () {
  calc_rho ();
  calc_phi ();
  calc_power_field ();
  calc_move ();
}

void print_move () {
  printf ("\n");
  for (int t = 0; t < 500; ++t) {
    printf ("%f,%f\n", X [t], Y [t]);
  }
}

int main (void) {
  init_place ();

  for (int ip = 0; ip < 500; ++ip) {
    vx[ip] = H * X [ip];
    vy[ip] = H * Y [ip];

    X [ip] = X [ip] + org;
    Y [ip] = Y [ip] + org;
  }

  print_move ();
  init_phi ();

  for (int i = 0; i < 20; ++i) {
    move_b ();
  }
  print_move ();
  for (int i = 0; i < 20; ++i) {
    move_b ();
  }
  print_move ();
  return 0;
}
  #+END_SRC
